https://start.spring.io/ 

To add the spring-boot-starter-jetty dependency in our pom.xml file. 

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
		    	<exclusion>
			  <groupId>org.springframework.boot</groupId>
		      <artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>


2)  Getting unknown error at Line 1 in pom.xml in Eclipse IDE
	<properties>
		<java.version>1.8</java.version>
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
	</properties>

3) Spring Boot Change Context Path ? 

application.properties file

	server.servlet.context-path=/springbootcontext

4) Spring Boot with Swagger
Step 1 : pom.xml 
	<dependency>
   		<groupId>io.springfox</groupId>
   		<artifactId>springfox-swagger2</artifactId>
   		<version>2.7.0</version>
	</dependency>
	
	<dependency>
   		<groupId>io.springfox</groupId>
   		<artifactId>springfox-swagger-ui</artifactId>
   		<version>2.7.0</version>
	</dependency>

Step 2 : Add the @EnableSwagger2 annotation in your main Spring          Boot application.

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
import io.swagger.annotations.SwaggerDefinition;

@SpringBootApplication
@EnableSwagger2
@SwaggerDefinition
public class SwaggerDemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(SwaggerDemoApplication.class, args);
   }
}

Step 3 : application.properties

spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

Step 4 :  URL in your web browser and see the Swagger API functionalities.

http://localhost:9090/swagger-ui.html



5) 
Step 1 : pom.xml
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml -->
<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
</dependency>


Step 2 : @GetMapping(value = "/first" ,produces= {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})

Step 3 :  postman 
	accept :  application/xml

Notes :

The Order Matters
-----------------
- if the client application does not include the Accept HTTP header in the  response?

- If we do not provide any of these media types, then the default   representation of a resource will be JSON. But if we have configured   more that one MediaType, then their order matters, and if the client   application does not include the Accept HTTP header in the request, then   our web service will respond back with a Resource using the   Representation that is configured first in the list of media types


6) Creating a Web Application With Spring Boot

Step 1  :
	packaging   : war 
	dependencies: a) Web
		      b) Actuator
		      c) DevTools

Step 2 :pom.xml 
To enable support for JSPâ€™s, we would need to add a dependency on tomcat-embed-jasper.


 <!-- JSTL for JSP -->
   <dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>jstl</artifactId>
   </dependency>

   <!-- Need this to compile JSP -->
   <dependency>
 	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
        <scope>provided</scope>
    </dependency>

Step 3 : Configuring a View Resolver (application.properties)

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

Step 4 : .jsp 

<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

Demo 7 : 
Spring Boot Thymeleaf View

- Thymeleaf is a server side Java template engine for web application.
- Can be integrate with Spring Framework and ideal for HTML5 Java web   applications.
- Thymeleaf we must add it into our pom.xml file
    <dependency>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-thymeleaf</artifactId>  
  </dependency>
- Template that we are using this library. Like:
	<html xmlns:th="https://thymeleaf.org">  


Demo 8 : Logging in Spring Boot
// Default logging support provided in spring boot which uses Logback
// Logback supports ERROR, WARN, INFO, DEBUG, or TRACE as logging level. 
- By default, logging level is set to INFO. It means that code >DEBUG and   TRACE messages are not visible.


Step 1 : application.properties 

server.port = 8081

logging.file.name=MyApp.log
logging.pattern.rolling-file-name=MyApp-%d{yyyy-MM-dd}.%i.log
logging.file.max-size=1MB
logging.file.total-size-cap=10MB
logging.file.max-history=30
logging.file.clean-history-on-start=true


Step 2 : 

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@RestController
public class HelloController {

private static final Logger logger = LoggerFactory.getLogger(HelloController.class);

	    @GetMapping("/")
	    public String hello(Model model) {
	        logger.info("Hello from Logback ");


H2 database configuration
-------------------------
 application.properties 

server.port=9090

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enable=true


 1. start and run the appliation.
 2. open H2 console
	Go to url http://localhost:9090/h2-console



server.port = 9090
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/sample1?useSSL=false
spring.datasource.username = root
spring.datasource.password = root


spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update/none
#spring.jpa.properties.hibernate.dialect = #org.hibernate.dialect.MySQL5Dialect


@GetMapping(value = "/employees", 
  produces = {MediaType.APPLICATION_XML_VALUE,               MediaType.APPLICATION_JSON_VALUE})


spring.datasource.url=jdbc:mysql://localhost/ecommerce?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false

Euraka Server 
--------------
server.port=8761
spring.application.name=EurekaService
eureka.client.register-with-eureka=false

Euraka Client 
-------------
server.port=9091
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


Netflix's Zuul
--------------

server.port = 9090
spring.application.name = api-gateway
# routing for service 1
zuul.routes.service_1.path = /api/service_1/**
zuul.routes.service_1.url = http://localhost:9091/
# routing for service 2
zuul.routes.service_2.path = /api/service_2/**
zuul.routes.service_2.url = http://localhost:9092/

Spring Cloud Gateway
--------------------  

server.port= 9090

spring:
  cloud:
    gateway:
      routes:
      - id: employeeModule
        uri: http://localhost:9091/
        predicates:
        - Path=/employee/**
      - id: consumerModule
        uri: http://localhost:9092/
        predicates:
        - Path=/consumer/**

Java based config
----------------
@Configuration
public class SpringCloudConfig {

    @Bean
    public RouteLocator gatewayRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
                .route(r -> r.path("/employee/**")
                        .uri("http://localhost:9091/")
                        .id("employeeModule"))

                .route(r -> r.path("/consumer/**")
                        .uri("http://localhost:9092/")
                        .id("consumerModule"))
                .build();
    }

}

ribbon
-----
eureka.client.serviceUrl.defaultZone=http://localhost:8090/eureka
eureka.instance.instanceId=${spring.application.name}:${random.value}


Testing 
-------

import static org.junit.Assert.assertEquals;
import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
import static org.springframework.http.HttpStatus.OK;
import static org.springframework.http.HttpStatus.CREATED;


@RunWith(JUnitPlatform.class)
@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = RANDOM_PORT)
class SpringBootRestTest {

    @Autowired
    TestRestTemplate restTemplate;


server.servlet.context-path=/springboot

<dependencies>
		<dependency>
		<groupId>org.springframework.cloud</groupId>
       <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
	</dependency>

	<dependency>
	  <groupId>org.springframework.cloud</groupId>
	  <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
	  <version>2.2.2.RELEASE</version> 
        </dependency>

	<dependency>
	  <groupId>org.springframework.cloud</groupId>
   <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
	  <version>2.2.1.RELEASE</version>
	</dependency>

	<dependency>
	  <groupId>org.springframework.boot</groupId>
	   <artifactId>spring-boot-starter-actuator</artifactId>         </dependency>