
Step 1 : https://start.spring.io/

	Dependencies 	: 1) Spring Web
			  2) Spring Data JPA
			  3) MySQL Driver
			  4) Validation
			  5) Spring Boot DevTools

	Packaging	: Jar


Step 2 : application.properties 

server.port = 9090
server.servlet.context-path=/springboot-one-many

spring.datasource.url = jdbc:mysql://localhost:3306/training?useSSL=false
spring.datasource.username = root
spring.datasource.password = root


## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update


logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE

Step 3 : 

@Entity
@Table(name = "departmentang")
public class Department implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@NotNull
	@Size(max = 50)
	@Column(unique = true, length = 50)
	private String deptName;

	@NotNull
	@Size(max = 20)
	@Column(length = 20)
	private String deptLocation;

	@JsonManagedReference
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "departmentRef")
	private Set<Employee> employees;



Step 4 : 


@Entity
@Table(name = "employeeang")
public class Employee implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@NotNull
	@Column(length = 25)
	private String empName;

	@NotNull
	@Column(length = 25)
	private String designation;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "dept_id", nullable = false)
	@JsonBackReference
	private Department departmentRef;


Step 5 :
public interface DepartmentRepository extends JpaRepository<Department, Long>{

}

Step 6 :
 
public class ErrorDetails {
	private Date timestamp;
	private String message;
	private String details;

	public ErrorDetails(Date timestamp, String message, String details) {
		super();
		this.timestamp = timestamp;
		this.message = message;
		this.details = details;
	}

Step 7 : 

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends Exception{

    private static final long serialVersionUID = 1L;

    public ResourceNotFoundException(String message){
        super(message);
    }

}


Step 8 : 

@ControllerAdvice
public class GlobalExceptionHandler {
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<?> resourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
		ErrorDetails errorDetails = new ErrorDetails(new Date(), ex.getMessage(), request.getDescription(false));
		return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<?> globleExcpetionHandler(Exception ex, WebRequest request) {
		ErrorDetails errorDetails = new ErrorDetails(new Date(), ex.getMessage(), request.getDescription(false));
		return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}


Step 9 :

@RestController 
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api")
public class DepartmentController {
	@Autowired
    private DepartmentRepository departmentRepository;

    @GetMapping("/deparments")
    public List<Department> getAllEmployees() {
        return departmentRepository.findAll();
    }

    @GetMapping("/deparment/{id}")
    public ResponseEntity<Department> getDepartmentById(@PathVariable(value = "id") Long deptId)
        throws ResourceNotFoundException {
        Department department = departmentRepository.findById(deptId)
          .orElseThrow(() -> new ResourceNotFoundException("Department not found for this id :: " + deptId));
        return ResponseEntity.ok().body(department);
    }
    
    @PostMapping("/deparments")
    public Department createEmployee(@Valid @RequestBody Department department) {
        return departmentRepository.save(department);
    }

    @PutMapping("/deparment/{id}")
    public ResponseEntity<Department> updateEmployee(@PathVariable(value = "id") Long deptId,
         @Valid @RequestBody Department departmentArg) throws ResourceNotFoundException {
        Department department = departmentRepository.findById(deptId)
        .orElseThrow(() -> new ResourceNotFoundException("Department not found for this id :: " + deptId));

        department.setDeptName(departmentArg .getDeptName());
        department.setDeptLocation(departmentArg.getDeptLocation());
        department.setEmployees(departmentArg.getEmployees());
        final Department updatedDepartment = departmentRepository.save(department);
        return ResponseEntity.ok(updatedDepartment);
    }

    @DeleteMapping("/department/{id}")
    public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long deptId)
         throws ResourceNotFoundException {
        Department department = departmentRepository.findById(deptId)
       .orElseThrow(() -> new ResourceNotFoundException("Deparment not found for this id :: " + deptId));

        departmentRepository.delete(department);
        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE);
        return response;
    }
}

a) Get    : http://localhost:9090/springboot-one-many/api/deparments
b) Post	  : http://localhost:9090/springboot-one-many/api/deparments


{
    "id": 30,
    "deptName": "Training",
    "deptLocation": "Chennai",
    "employees": [
      {
        "id": 111,
        "empName": "Welcome",
        "designation": "Senior trainerr"
      },
      {
        "id": 222,
        "empName": "Bye",
        "designation": "SME"
      }
      ]
  }