Spring Boot - CORS Support
---------------------------

- Cross-Origin Resource Sharing (CORS) is a security concept that    allows restricting the resources implemented in web browsers. 

- It prevents the JavaScript code producing or consuming the     requests against different origin. 

- For example, your web application is running on 8080 port and by   using JavaScript you are trying to consuming RESTful web     services from 9090 port. Under such situations, you will face      the Cross-Origin Resource Sharing security issue on your web     browsers.

- Two requirements are needed to handle this issue -

	a) RESTful web services should support the Cross-Origin 	    Resource Sharing.
	b) RESTful web service application should allow accessing 	    the API(s) from the 8080 port.

Enable CORS in Controller Method
--------------------------------
- We need to set the origins for RESTful web service by using   @CrossOrigin annotation for the controller method. This   @CrossOrigin annotation supports specific REST API, and not for    the entire application.

@RequestMapping(value = "/products")
@CrossOrigin(origins = "http://localhost:8080")



Global CORS Configuration
--------------------------
- We need to define the shown @Bean configuration to set the CORS   configuration support globally to your Spring Boot application.

@SpringBootApplication
public class DemoApplication {
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }


   @Bean
   public WebMvcConfigurer corsConfigurer() {
      return new WebMvcConfigurerAdapter() {
         @Override
         public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/products").allowedOrigins("http://localhost:8080");
         }
      };
   }
}